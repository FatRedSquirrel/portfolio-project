{
	"create react component": {
		"prefix": "rc",
		"body": [
			"import { useTranslation } from 'react-i18next';",
			"import classNames from 'shared/lib/classNames/classNames';",
			"import cls from './Component.module.scss';",
			"",
			"interface ComponentProps {",
			"  className?: string",
			"}",
			"",
			"export const Component = (props: ComponentProps) => {",
			"  const {",
			"    className,",
			"  } = props;",
			"",
			"  const { t } = useTranslation();",
			"",
			"  return (",
			"    <div className={classNames(cls.Component, className)}>",
			"      Component",
			"    </div>",
			"  );",
			"};"
		],
		"description": "create react component"
	},
	"create component story": {
		"prefix": "str",
		"body": [
			"import { ComponentMeta, ComponentStory } from '@storybook/react';",
			"import { Component } from './Component';",
			"",
			"export default {",
			"  title: '',",
			"  component: Component,",
			"  argTypes: {",
			"    backgroundColor: { control: 'color' },",
			"  },",
			"} as ComponentMeta<typeof Component>;",
			"",
			"const Template: ComponentStory<typeof Component> = (args) => <Component {...args} />;",
			"",
			"export const Primary = Template.bind({});",
			"Primary.args = {};",
			""
		],
		"description": "create component story"
	},
	"create redux slice": {
		"prefix": "slc",
		"body": [
			"import { createSlice } from '@reduxjs/toolkit';",
			"",
			"const initialState = {",
			"",
			"};",
			"",
			"export const slice = createSlice({",
			"  name: '',",
			"  initialState,",
			"  reducers: {},",
			"  extraReducers: (builder) => {},",
			"});",
			"",
			"export const { actions } = slice;",
			"export const { reducer } = slice;"
		],
		"description": "create redux slice"
	},
	"create async thunk": {
		"prefix": "at",
		"body": [
			"import { createAsyncThunk } from '@reduxjs/toolkit';",
			"import { ThunkConfig } from 'app/providers/StoreProvider';",
			"",
			"export const thunkName = createAsyncThunk<",
			"  ReturnType, // return type",
			"  void, // func argument type",
			"  ThunkConfig<string>",
			">(",
			"  '',",
			"  async (_, thunkApi) => {",
			"    const { extra, rejectWithValue } = thunkApi;",
			"",
			"    try {",
			"      const { data } = await extra.api.get<ReturnType>('');",
			"",
			"      if (!data) {",
			"        throw new Error();",
			"      }",
			"",
			"      return data;",
			"    } catch (e) {",
			"      console.log(e);",
			"      return rejectWithValue('error');",
			"    }",
			"  },",
			");"
		],
		"description": "create async thunk"
	}
}